#%% Import Libraries
import tkinter as tk
from tkinter import ttk, messagebox
import numpy_financial as npf
import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

#%% Financial Calculations
def calculate_npv(rate, cash_flows):
    return npf.npv(rate, cash_flows)

def calculate_irr(cash_flows):
    return npf.irr(cash_flows)

def calculate_payback_period(cash_flows):
    cumulative_cash_flow = 0
    for i, cash_flow in enumerate(cash_flows):
        cumulative_cash_flow += cash_flow
        if cumulative_cash_flow >= 0:
            return i
    return None

#%% Plotting functions
def plot_cash_flow_timeline(cash_flows, filename='cash_flow_timeline.png'):
    plt.figure(figsize=(8, 4))
    plt.bar(range(1, len(cash_flows) + 1), cash_flows, color=['red' if x < 0 else 'green' for x in cash_flows])
    plt.xlabel('Period')
    plt.ylabel('Cash Flow')
    plt.title('Cash Flow Timeline')
    plt.grid(True)
    plt.savefig(filename)
    plt.close()

def plot_npv_sensitivity(cash_flows, filename='npv_sensitivity.png'):
    rates = [r/100 for r in range(1, 21)]
    npvs = [calculate_npv(rate, cash_flows) for rate in rates]
    
    plt.figure(figsize=(8, 4))
    plt.plot(rates, npvs, marker='o')
    plt.xlabel('Discount Rate')
    plt.ylabel('Net Present Value (NPV)')
    plt.title('NPV Sensitivity Analysis')
    plt.grid(True)
    plt.savefig(filename)
    plt.close()

#%% Create PDF with plots
def create_pdf_with_plots(data, plot1_filename, plot2_filename, pdf_filename="Output.pdf"):
    c = canvas.Canvas(pdf_filename, pagesize=letter)
    width, height = letter

    # Write text data
    textobject = c.beginText(40, height - 40)
    for line in data.split('\n'):
        textobject.textLine(line)
    c.drawText(textobject)

    # Embed images
    c.drawImage(plot1_filename, 40, height - 500, width=400, preserveAspectRatio=True, anchor='c')
    c.drawImage(plot2_filename, 40, height - 800, width=400, preserveAspectRatio=True, anchor='c')

    c.save()
    messagebox.showinfo("Saved", f"Results saved as {pdf_filename}")

#%% GUI Callback
def on_calculate():
    try:
        if not entries:
            messagebox.showerror("Error", "No cash flows to calculate.")
            return

        cash_flows = []
        for entry in entries:
            if entry.get().strip() == "":
                messagebox.showerror("Error", "Please enter all cash flows.")
                return
            cash_flows.append(float(entry.get()))

        discount_rate_str = entry_rate.get().strip()
        if not discount_rate_str:
            messagebox.showerror("Error", "Please enter the discount rate.")
            return

        # Check if the rate is in percentage format
        if '%' in discount_rate_str:
            discount_rate_str = discount_rate_str.replace('%', '').strip()
        
        discount_rate = float(discount_rate_str)

        # Convert to decimal if entered as a percentage
        if discount_rate > 1:
            discount_rate /= 100

        npv = calculate_npv(discount_rate, cash_flows)
        irr = calculate_irr(cash_flows)
        payback_period = calculate_payback_period(cash_flows)

        result_string = f"Net Present Value (NPV): ${npv:.2f}\n"
        result_string += f"Internal Rate of Return (IRR): {irr*100:.2f}%\n"
        if payback_period is not None:
            result_string += f"Payback Period: {payback_period} years"
        else:
            result_string += "Payback Period: Not achieved within given periods"

        messagebox.showinfo("Results", result_string)

        plot_cash_flow_timeline(cash_flows)
        plot_npv_sensitivity(cash_flows)

    except ValueError as e:
        messagebox.showerror("Error", f"Invalid input: {e}")

#%% Save as PDF Callback
def on_save_as_pdf():
    try:
        cash_flows = [float(entry.get()) for entry in entries if entry.get().strip()]
        discount_rate_str = entry_rate.get().strip()

        if '%' in discount_rate_str:
            discount_rate_str = discount_rate_str.replace('%', '').strip()
        discount_rate = float(discount_rate_str)
         # Convert to decimal if entered as a percentage
        if discount_rate > 1:
            discount_rate /= 100

        npv = calculate_npv(discount_rate, cash_flows)
        irr = calculate_irr(cash_flows)
        payback_period = calculate_payback_period(cash_flows)

        result_string = f"Net Present Value (NPV): ${npv:.2f}\n"
        result_string += f"Internal Rate of Return (IRR): {irr*100:.2f}%\n"
        if payback_period is not None:
            result_string += f"Payback Period: {payback_period} years"
        else:
            result_string += "Payback Period: Not achieved within given periods"

        # Get the user-specified filename
        pdf_filename = entry_pdf_filename.get().strip()
        if not pdf_filename:
            messagebox.showerror("Error", "Please enter a filename for the PDF.")
            return
        if not pdf_filename.endswith('.pdf'):
            pdf_filename += '.pdf'

        # Save plots
        plot_cash_flow_timeline(cash_flows, 'cash_flow_timeline.png')
        plot_npv_sensitivity(cash_flows, 'npv_sensitivity.png')

        # Generate PDF with plots and user-specified filename
        create_pdf_with_plots(result_string, 'cash_flow_timeline.png', 'npv_sensitivity.png', pdf_filename)

    except ValueError as e:
        messagebox.showerror("Error", f"Invalid input: {e}")

#%% Update cash flow entries dynamically
def update_entries():
    try:
        num_periods = int(num_periods_entry.get())
        for entry in entries:
            entry.destroy()
        entries.clear()
        for i in range(num_periods):
            label = ttk.Label(frame_flows, text=f"Year {i+1}:")
            label.grid(column=0, row=i+1, padx=5, pady=2, sticky='w')
            
            entry = ttk.Entry(frame_flows, width=20)
            entry.grid(column=1, row=i+1, padx=5, pady=2, sticky='ew')
            entries.append(entry)
    except ValueError:
        messagebox.showerror("Error", "Please enter a valid number of periods.")

#%% GUI Setup
app = tk.Tk()
app.title("PIDT - Project Investment Decision Tool")

# Entry for number of periods
label_num_periods = ttk.Label(app, text="Enter the number of periods (e.g., years):")
label_num_periods.grid(column=0, row=0, padx=10, pady=5)

num_periods_entry = ttk.Entry(app, width=20)
num_periods_entry.grid(column=1, row=0, padx=10, pady=5)

# Button to update cash flows
update_button = ttk.Button(app, text="Input Cash Flows", command=update_entries)
update_button.grid(column=2, row=0, padx=10, pady=5)

# Frame for cash flows
frame_flows = ttk.LabelFrame(app, text="Cash Flows")
frame_flows.grid(column=0, row=1, columnspan=3, padx=10, pady=5, sticky="ew")

entries = []

# Entry for discount rate
label_rate = ttk.Label(app, text="Enter the discount rate (e.g., 0.1 for 10%):")
label_rate.grid(column=0, row=2, padx=10, pady=5)

entry_rate = ttk.Entry(app, width=20)
entry_rate.grid(column=1, row=2, padx=10, pady=5)

# Calculate Button
btn_calculate = ttk.Button(app, text="Calculate", command=on_calculate)
btn_calculate.grid(column=0, row=3, columnspan=3, pady=20)

# Entry for PDF filename
label_pdf_filename = ttk.Label(app, text="Enter filename for the PDF:")
label_pdf_filename.grid(column=0, row=4, padx=10, pady=5)

entry_pdf_filename = ttk.Entry(app, width=20)
entry_pdf_filename.grid(column=1, row=4, padx=10, pady=5)
entry_pdf_filename.insert(0, "Output.pdf")  # Default filename

# Save as PDF Button
save_pdf_button = ttk.Button(app, text="Save as PDF", command=on_save_as_pdf)
save_pdf_button.grid(column=0, row=5, columnspan=3, pady=10)

# Start the GUI
app.mainloop()  
